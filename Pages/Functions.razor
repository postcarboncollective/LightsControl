@page "/"
@page "/Functions"
@using MudBlazor.Utilities
@using System.Runtime.InteropServices.JavaScript

<PageTitle>Functions</PageTitle>

<center>
    <br/>
    <MudContainer>
        <MudButton OnClick="@(() => ShowBlackoutPanel = !ShowBlackoutPanel)" EndIcon="@(ShowBlackoutPanel ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)">
            Blackout
        </MudButton>
        @if (ShowBlackoutPanel)
        {
            <MudContainer Style="background: #111f">
                <br/>
                <MudGrid>
                    @foreach (var name in Enum.GetNames(typeof(Lights)))
                    {
                        <MudItem xs="6">
                            <MudSwitch UnCheckedColor="Color.Primary" Color="Color.Secondary" Label="@name" LabelPosition="LabelPosition.Start" @bind-Value="@LightsControl.Function.BlackoutToggle[Enum.GetNames(typeof(Lights)).ToList().IndexOf(name)].Value" Style="align-items: center"/>
                        </MudItem>
                    }
                </MudGrid>
                <br/>
                <MudGrid>
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" EndIcon="@Icons.Material.Filled.Send" OnClick="LightsControl.Function.Blackout">Execute</MudButton>
                    </MudItem>
                </MudGrid>
                <br/>
            </MudContainer>
        }
    </MudContainer>
    <br/>
    <MudContainer>
        <MudButton OnClick="@(() => ShowExpulsadeiraPanel = !ShowExpulsadeiraPanel)" EndIcon="@(ShowExpulsadeiraPanel ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)">
            Expulsadeira
        </MudButton>
        @if (ShowExpulsadeiraPanel)
        {
            <MudContainer Style="background: #111f">
                <br/>
                <MudGrid>
                    @foreach (var name in Enum.GetNames(typeof(Lights)))
                    {
                        <MudItem xs="6">
                            <MudSwitch UnCheckedColor="Color.Primary" Color="Color.Secondary" Label="@name" LabelPosition="LabelPosition.Start" @bind-Value="@Function.ExpulsadeiraToggle[Enum.GetNames(typeof(Lights)).ToList().IndexOf(name)].Value" Style="align-items: center"/>
                        </MudItem>
                    }
                    <MudItem xs="12" Class="d-flex justify-center">
                        <MudColorPicker @bind-Value="Function.ExpulsadeiraColor.Value" DisableToolbar="@true" DisableAlpha="@true" DisableColorField="@false" DisablePreview="@false" DisableSliders="@false" DisableInputs="@true" DisableModeSwitch="@true" ColorPickerMode="ColorPickerMode.RGB" PickerVariant="PickerVariant.Static"/>
                    </MudItem>
                </MudGrid>
                <br/>
                <MudGrid>
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" EndIcon="@Icons.Material.Filled.Send" OnClick="Function.Expulsadeira">Execute</MudButton>
                    </MudItem>
                </MudGrid>
                <br/>
            </MudContainer>
        }
    </MudContainer>
    <br/>
    <MudContainer>
        <MudButton OnClick="@(() => ShowStrobePanel = !ShowStrobePanel)" EndIcon="@(ShowStrobePanel ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)" Color="@(Function.StrobeExecuting.Value ? Color.Secondary : Color.Primary)">
            Strobe
        </MudButton>
        @if (ShowStrobePanel)
        {
            <MudContainer Style="background: #111f">
                <br/>
                <MudGrid>
                    @foreach (var name in Enum.GetNames(typeof(Lights)))
                    {
                        <MudItem xs="6">
                            <MudSwitch UnCheckedColor="Color.Primary" Color="Color.Secondary" Label="@name" LabelPosition="LabelPosition.Start" @bind-Value="@Function.StrobeToggle[Enum.GetNames(typeof(Lights)).ToList().IndexOf(name)].Value" Style="align-items: center"/>
                        </MudItem>
                    }
                    <MudItem xs="12" Class="d-flex justify-center">
                        <MudColorPicker @bind-Value="Function.StrobeColor.Value" DisableToolbar="@true" DisableAlpha="@true" DisableColorField="@false" DisablePreview="@false" DisableSliders="@false" DisableInputs="@true" DisableModeSwitch="@true" ColorPickerMode="ColorPickerMode.RGB" PickerVariant="PickerVariant.Static"/>
                    </MudItem>
                </MudGrid>
                <br/>
                <MudGrid>
                    <MudItem xs="@(Function.StrobeExecuting.Value ? 6 : 12)">
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" EndIcon="@Icons.Material.Filled.Send" OnClick="Function.Strobe">Execute</MudButton>
                    </MudItem>
                    @if (Function.StrobeExecuting.Value)
                    {
                        <MudItem xs="6">
                            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" EndIcon="@Icons.Material.Filled.Stop" OnClick="LightsControl.Function.StrobeCancel">Cancel</MudButton>
                        </MudItem>
                    }
                </MudGrid>
                <br/>
            </MudContainer>
        }
    </MudContainer>
</center>

@code {
    public bool ShowBlackoutPanel = false;
    public bool ShowExpulsadeiraPanel = false;
    public bool ShowStrobePanel = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Global.Sync += Refresh;
    }

    public void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

}